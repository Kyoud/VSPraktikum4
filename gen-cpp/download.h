/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef download_H
#define download_H

#include <thrift/TDispatchProcessor.h>
#include "download_types.h"



class downloadIf {
 public:
  virtual ~downloadIf() {}
  virtual void ping() = 0;
  virtual int32_t download(const std::string& str, const int32_t length) = 0;
};

class downloadIfFactory {
 public:
  typedef downloadIf Handler;

  virtual ~downloadIfFactory() {}

  virtual downloadIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(downloadIf* /* handler */) = 0;
};

class downloadIfSingletonFactory : virtual public downloadIfFactory {
 public:
  downloadIfSingletonFactory(const boost::shared_ptr<downloadIf>& iface) : iface_(iface) {}
  virtual ~downloadIfSingletonFactory() {}

  virtual downloadIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(downloadIf* /* handler */) {}

 protected:
  boost::shared_ptr<downloadIf> iface_;
};

class downloadNull : virtual public downloadIf {
 public:
  virtual ~downloadNull() {}
  void ping() {
    return;
  }
  int32_t download(const std::string& /* str */, const int32_t /* length */) {
    int32_t _return = 0;
    return _return;
  }
};


class download_ping_args {
 public:

  download_ping_args() {
  }

  virtual ~download_ping_args() throw() {}


  bool operator == (const download_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const download_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const download_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class download_ping_pargs {
 public:


  virtual ~download_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class download_ping_result {
 public:

  download_ping_result() {
  }

  virtual ~download_ping_result() throw() {}


  bool operator == (const download_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const download_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const download_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class download_ping_presult {
 public:


  virtual ~download_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _download_download_args__isset {
  _download_download_args__isset() : str(false), length(false) {}
  bool str;
  bool length;
} _download_download_args__isset;

class download_download_args {
 public:

  download_download_args() : str(), length(0) {
  }

  virtual ~download_download_args() throw() {}

  std::string str;
  int32_t length;

  _download_download_args__isset __isset;

  void __set_str(const std::string& val) {
    str = val;
  }

  void __set_length(const int32_t val) {
    length = val;
  }

  bool operator == (const download_download_args & rhs) const
  {
    if (!(str == rhs.str))
      return false;
    if (!(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const download_download_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const download_download_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class download_download_pargs {
 public:


  virtual ~download_download_pargs() throw() {}

  const std::string* str;
  const int32_t* length;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _download_download_result__isset {
  _download_download_result__isset() : success(false) {}
  bool success;
} _download_download_result__isset;

class download_download_result {
 public:

  download_download_result() : success(0) {
  }

  virtual ~download_download_result() throw() {}

  int32_t success;

  _download_download_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const download_download_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const download_download_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const download_download_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _download_download_presult__isset {
  _download_download_presult__isset() : success(false) {}
  bool success;
} _download_download_presult__isset;

class download_download_presult {
 public:


  virtual ~download_download_presult() throw() {}

  int32_t* success;

  _download_download_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class downloadClient : virtual public downloadIf {
 public:
  downloadClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  downloadClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  int32_t download(const std::string& str, const int32_t length);
  void send_download(const std::string& str, const int32_t length);
  int32_t recv_download();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class downloadProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<downloadIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (downloadProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_download(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  downloadProcessor(boost::shared_ptr<downloadIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &downloadProcessor::process_ping;
    processMap_["download"] = &downloadProcessor::process_download;
  }

  virtual ~downloadProcessor() {}
};

class downloadProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  downloadProcessorFactory(const ::boost::shared_ptr< downloadIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< downloadIfFactory > handlerFactory_;
};

class downloadMultiface : virtual public downloadIf {
 public:
  downloadMultiface(std::vector<boost::shared_ptr<downloadIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~downloadMultiface() {}
 protected:
  std::vector<boost::shared_ptr<downloadIf> > ifaces_;
  downloadMultiface() {}
  void add(boost::shared_ptr<downloadIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  int32_t download(const std::string& str, const int32_t length) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->download(str, length);
    }
    return ifaces_[i]->download(str, length);
  }

};



#endif
