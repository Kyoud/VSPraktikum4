// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "download.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <cstdlib>
#include <iostream>
#include <ctime>
#include <ratio>
#include <chrono>
#include <sys/time.h>
#include <fstream>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;


using boost::shared_ptr;

class downloadHandler : virtual public downloadIf {
 public:
  downloadHandler() {
    // Your initialization goes here
  }

  void ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  int32_t download(const std::string& str, const int32_t length) {
    // Your implementation goes here
	
	std::ofstream myfile;
	myfile.open("text.txt", std::ios::app);
	myfile << str;
	myfile.close();
	//cout << "string: " <<str <<"integer: " << legth <<endl;
	
    printf("download\n");
	return 6;
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<downloadHandler> handler(new downloadHandler());
  shared_ptr<TProcessor> processor(new downloadProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

